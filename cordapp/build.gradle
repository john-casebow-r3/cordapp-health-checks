
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

archivesBaseName = "health-checks-cordapp"

sourceSets {
    main {
        resources {
            srcDir "../config/dev"
        }
    }
    test {
        resources {
            srcDir "../config/test"
        }
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources {
            srcDir "../config/test"
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    integrationTestCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    integrationTestCompile "junit:junit:$junit_version"
    integrationTestCompile "$corda_release_group:corda-node-driver:$corda_release_version"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"

    // Corda integration dependencies
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

cordapp {
    targetPlatformVersion corda_platform_version
    minimumPlatformVersion corda_platform_version
    contract {
        name "Contracts"
        vendor "R3"
        licence "Apache License, Version 2.0"
        versionId 1
    }
    workflow {
        name "Flows"
        vendor "R3"
        licence "Apache License, Version 2.0"
        versionId 1
    }
}

task copyToLib(type: Copy) {
    into "${buildDir}/libs"
    from configurations.cordapp
}

build.dependsOn(copyToLib)

task prepareDockerNodes(type: net.corda.plugins.Dockerform, dependsOn: ['jar']) {
    // set docker image for each node
    dockerImage = "corda/community:4.9-zulu-openjdk8"

    nodeDefaults {
        projectCordapp {deploy = true}
    }

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10023")
        }
        projectCordapp {
            deploy = false
        }
        cordapps.clear()
        sshdPort 2222
    }

    node {
        name "O=Master,L=R3,C=GB"
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10023")
        }
        rpcUsers = [[ user: "corda", "password": "test", "permissions": ["ALL"]]]
        sshdPort 2223
    }

    node {
        name "O=Slave1,L=R3,C=GB"
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10023")
        }
        rpcUsers = [[ user: "corda", "password": "test", "permissions": ["ALL"]]]
        sshdPort 2224
    }

    node {
        name "O=Slave2,L=R3,C=GB"
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10023")
        }
        rpcUsers = [[ user: "corda", "password": "test", "permissions": ["ALL"]]]
        sshdPort 2225
    }
}
